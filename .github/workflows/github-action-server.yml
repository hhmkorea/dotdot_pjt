# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  # main 브랜치로  push가 되면 동작합니다. 
  push:
    branches: [ "main" ]

  # main 브랜치로 PR이 오면 동작합니다.
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.java'
      - '**/build.gradle*'
      - '**/settings.gradle*'
      - '**/application.yml'
      - '**.sql'

permissions:
  contents: read

# build라는 job은 3개의 step으로 구성됨.
jobs:
  build:

    # workflow가 실행되는 vm의 os 지정
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    # 1. vm에서 레퍼지토리 내려받음
    - uses: actions/checkout@v2

    # 2. vm에 jdk를 세팅함
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # 배포판 선택
        cache: gradle

    # 3. vm에 mariadb 셋팅함
    - name: Setup MariaDB
      uses: getong/mariadb-action@v1.1
      with:
        host port: '3306'
        container port: '3306'
        character set server: 'utf8'
        mariadb version: 'latest'
        mysql database: 'dotdot'
        mysql user: 'root'
        mysql password: ${{ secrets.MYSQL_PASSWORD }}

    # 3. Make application.yml
    - run: touch ./src/main/resources/application.yml
    - run : | 
        mkdir -p ./src/main/resources 
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.APPLICATION }}" > ./application.yml

    # 4. Gradle 실행
    # gradlew에 실행권한을 주지 않은면 에러가 뜸.
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      working-directory: ./site

    # ./gradlew build 이 실행되면 build/libs 폴더에 jar 파일이 생김.
    # 관련 설정 : build.gradle 의 jar {...}, bootJar{...} 부분
    - name: Build with Gradle(Test 제외)
      run: ./gradlew clean --stacktrace --info build
      working-directory: ./site

    # 현재 디렉토리에 있는 Dockerfile 을 사용하여 도커 이미지 빌드.
    # 이때 이미지 이름은 <docker_hub_username>/<image_name> 로 설정됨.
    # 도커 허브에 이미지를 publish 하기 위해서는 앞에 유저이름을 곡 붙여야 함.
    - name: Build Docker image
      run: docker build -t {{ secrets.DOCKERHUB_USERNAME }}/site-springboot .
      working-directory: ./site

    # docker/login-action 이라는 Action 사용해서 도커 로그인 진행
    # -u, -p 옵션을 사용하여 인라인 명령을 사용하면, GitHub Action에서는 보안상 오류가 발생.
    - name: Docker Hub 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Docker Hub 저장소에 이미지를 push
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/site-springboot
      working-directory: ./site
